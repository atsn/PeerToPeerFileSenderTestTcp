//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PeerToPeerFileSenderTestTcp.Powernap {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentFile", Namespace="http://schemas.datacontract.org/2004/07/SoapService")]
    [System.SerializableAttribute()]
    public partial class ContentFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Powernap.IPowerNapService")]
    public interface IPowerNapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/Count", ReplyAction="http://tempuri.org/IPowerNapService/CountResponse")]
        int Count();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/Count", ReplyAction="http://tempuri.org/IPowerNapService/CountResponse")]
        System.Threading.Tasks.Task<int> CountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/CountHost", ReplyAction="http://tempuri.org/IPowerNapService/CountHostResponse")]
        int CountHost();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/CountHost", ReplyAction="http://tempuri.org/IPowerNapService/CountHostResponse")]
        System.Threading.Tasks.Task<int> CountHostAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/CountFilename", ReplyAction="http://tempuri.org/IPowerNapService/CountFilenameResponse")]
        int CountFilename();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/CountFilename", ReplyAction="http://tempuri.org/IPowerNapService/CountFilenameResponse")]
        System.Threading.Tasks.Task<int> CountFilenameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/Add", ReplyAction="http://tempuri.org/IPowerNapService/AddResponse")]
        bool Add(string filename, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/Add", ReplyAction="http://tempuri.org/IPowerNapService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(string filename, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/AddAll", ReplyAction="http://tempuri.org/IPowerNapService/AddAllResponse")]
        int AddAll(string[] fileList, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/AddAll", ReplyAction="http://tempuri.org/IPowerNapService/AddAllResponse")]
        System.Threading.Tasks.Task<int> AddAllAsync(string[] fileList, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/Remove", ReplyAction="http://tempuri.org/IPowerNapService/RemoveResponse")]
        bool Remove(string filename, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/Remove", ReplyAction="http://tempuri.org/IPowerNapService/RemoveResponse")]
        System.Threading.Tasks.Task<bool> RemoveAsync(string filename, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/RemoveAll", ReplyAction="http://tempuri.org/IPowerNapService/RemoveAllResponse")]
        int RemoveAll(string[] fileList, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/RemoveAll", ReplyAction="http://tempuri.org/IPowerNapService/RemoveAllResponse")]
        System.Threading.Tasks.Task<int> RemoveAllAsync(string[] fileList, string host, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/RequestFile", ReplyAction="http://tempuri.org/IPowerNapService/RequestFileResponse")]
        PeerToPeerFileSenderTestTcp.Powernap.ContentFile RequestFile(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/RequestFile", ReplyAction="http://tempuri.org/IPowerNapService/RequestFileResponse")]
        System.Threading.Tasks.Task<PeerToPeerFileSenderTestTcp.Powernap.ContentFile> RequestFileAsync(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/SearchArchive", ReplyAction="http://tempuri.org/IPowerNapService/SearchArchiveResponse")]
        PeerToPeerFileSenderTestTcp.Powernap.ContentFile[] SearchArchive(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/SearchArchive", ReplyAction="http://tempuri.org/IPowerNapService/SearchArchiveResponse")]
        System.Threading.Tasks.Task<PeerToPeerFileSenderTestTcp.Powernap.ContentFile[]> SearchArchiveAsync(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/SendArchive", ReplyAction="http://tempuri.org/IPowerNapService/SendArchiveResponse")]
        bool SendArchive(PeerToPeerFileSenderTestTcp.Powernap.ContentFile[] cfList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerNapService/SendArchive", ReplyAction="http://tempuri.org/IPowerNapService/SendArchiveResponse")]
        System.Threading.Tasks.Task<bool> SendArchiveAsync(PeerToPeerFileSenderTestTcp.Powernap.ContentFile[] cfList);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPowerNapServiceChannel : PeerToPeerFileSenderTestTcp.Powernap.IPowerNapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PowerNapServiceClient : System.ServiceModel.ClientBase<PeerToPeerFileSenderTestTcp.Powernap.IPowerNapService>, PeerToPeerFileSenderTestTcp.Powernap.IPowerNapService {
        
        public PowerNapServiceClient() {
        }
        
        public PowerNapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PowerNapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PowerNapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PowerNapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Count() {
            return base.Channel.Count();
        }
        
        public System.Threading.Tasks.Task<int> CountAsync() {
            return base.Channel.CountAsync();
        }
        
        public int CountHost() {
            return base.Channel.CountHost();
        }
        
        public System.Threading.Tasks.Task<int> CountHostAsync() {
            return base.Channel.CountHostAsync();
        }
        
        public int CountFilename() {
            return base.Channel.CountFilename();
        }
        
        public System.Threading.Tasks.Task<int> CountFilenameAsync() {
            return base.Channel.CountFilenameAsync();
        }
        
        public bool Add(string filename, string host, int port) {
            return base.Channel.Add(filename, host, port);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(string filename, string host, int port) {
            return base.Channel.AddAsync(filename, host, port);
        }
        
        public int AddAll(string[] fileList, string host, int port) {
            return base.Channel.AddAll(fileList, host, port);
        }
        
        public System.Threading.Tasks.Task<int> AddAllAsync(string[] fileList, string host, int port) {
            return base.Channel.AddAllAsync(fileList, host, port);
        }
        
        public bool Remove(string filename, string host, int port) {
            return base.Channel.Remove(filename, host, port);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAsync(string filename, string host, int port) {
            return base.Channel.RemoveAsync(filename, host, port);
        }
        
        public int RemoveAll(string[] fileList, string host, int port) {
            return base.Channel.RemoveAll(fileList, host, port);
        }
        
        public System.Threading.Tasks.Task<int> RemoveAllAsync(string[] fileList, string host, int port) {
            return base.Channel.RemoveAllAsync(fileList, host, port);
        }
        
        public PeerToPeerFileSenderTestTcp.Powernap.ContentFile RequestFile(string keyword) {
            return base.Channel.RequestFile(keyword);
        }
        
        public System.Threading.Tasks.Task<PeerToPeerFileSenderTestTcp.Powernap.ContentFile> RequestFileAsync(string keyword) {
            return base.Channel.RequestFileAsync(keyword);
        }
        
        public PeerToPeerFileSenderTestTcp.Powernap.ContentFile[] SearchArchive(string keyword) {
            return base.Channel.SearchArchive(keyword);
        }
        
        public System.Threading.Tasks.Task<PeerToPeerFileSenderTestTcp.Powernap.ContentFile[]> SearchArchiveAsync(string keyword) {
            return base.Channel.SearchArchiveAsync(keyword);
        }
        
        public bool SendArchive(PeerToPeerFileSenderTestTcp.Powernap.ContentFile[] cfList) {
            return base.Channel.SendArchive(cfList);
        }
        
        public System.Threading.Tasks.Task<bool> SendArchiveAsync(PeerToPeerFileSenderTestTcp.Powernap.ContentFile[] cfList) {
            return base.Channel.SendArchiveAsync(cfList);
        }
    }
}
